//{ Driver Code Starts
#include <iostream>
#include <sstream>
#include <string>
#include <unordered_map>
#include <vector>
using namespace std;

struct Node {
    int data;
    struct Node *next;

    Node(int x) {
        data = x;
        next = NULL;
    }
};

void printList(Node *node) {
    while (node != NULL) {
        cout << node->data << " ";
        node = node->next;
    }
    cout << "\n";
}


// } Driver Code Ends
// User function template for C++

/*
struct Node
{
    int data;
    struct Node* next;

    Node(int x){
        data = x;
        next = NULL;
    }
};
*/
class Solution {
public:
    Node* divide(Node* head) {
        // Create two dummy nodes to start the left and right lists
        Node* leftDummy = new Node(0);
        Node* rightDummy = new Node(0);

        // Pointers to build the left and right lists
        Node* left = leftDummy;
        Node* right = rightDummy;

        Node* temp = head;

        // Traverse the original list
        while (temp != NULL) {
            if ((temp->data) % 2 == 0) {
                left->next = temp;  // Append to left list
                left = left->next;
            } else {
                right->next = temp;  // Append to right list
                right = right->next;
            }
            temp = temp->next;
        }

        // Combine the two lists
        left->next = rightDummy->next;
        right->next = NULL;

        // Get the new head, which starts at leftDummy->next
        Node* newHead = leftDummy->next;

        // Free the dummy nodes
        delete leftDummy;
        delete rightDummy;

        return newHead;
    }
};


//{ Driver Code Starts.

int main() {

    int t;
    cin >> t;
    cin.ignore(); // To ignore the newline character after the integer input
    while (t--) {
        vector<int> arr;
        string input;
        getline(cin, input);
        stringstream ss(input);
        int number;
        while (ss >> number) {
            arr.push_back(number);
        }

        if (arr.empty())
            continue;

        int data = arr[0];
        int N = arr.size();
        struct Node *head = new Node(data);
        struct Node *tail = head;
        for (int i = 1; i < N; ++i) {
            data = arr[i];
            tail->next = new Node(data);
            tail = tail->next;
        }

        Solution ob;
        Node *ans = ob.divide(head);
        printList(ans);
    }
    return 0;
}

// } Driver Code Ends
