/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode* res=new ListNode(0);
        ListNode* ptr=res;
     l1=reverse(l1);
     l2=reverse(l2);
     int sum=0;
     int carry=0;
     while(l1!=NULL || l2!=NULL)
     {
        sum=0+carry;
        if(l1!=NULL)
        {
            sum+=l1->val;
            l1=l1->next;
        }
        if(l2!=NULL)
        {
            sum+=l2->val;
            l2=l2->next;
        }
        carry=sum/10;
        sum=sum%10;
        ptr->next=new ListNode(sum);
        ptr=ptr->next;
     } 
     if(carry==1)
     {
        ptr->next=new ListNode(1);

     }  
     return reverse(res->next);
    }
private:
    ListNode* reverse(ListNode* head)
    {
        ListNode* prev=NULL;
        ListNode* curr=head;
        ListNode* forward=NULL;
        while(curr!=NULL)
        {
            forward=curr->next;
            curr->next=prev;
            prev=curr;
            curr=forward;
        }
        return prev;
    }    
};
